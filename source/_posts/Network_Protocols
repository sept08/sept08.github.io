---
title: 网络协议
layout: post
date: 2017-08-06 14:20:30
tags: protocol
categories: Theory
comments: true
---

网络协议栈的神奇之处在于它确实能做成一些似乎不可能的事情：
它能在不稳定的网络上提供稳定的传输，且并不会有多少可检测出的问题；
它能通过平滑地处理来应对将到来的网络拥塞；
它能为上亿的活跃节点提供地址连接；
它也能在一条链路发生故障时，在另一条链路上重建信息包的传递，以应对可能遭到损坏的网络基础设施；
它还能通过调节使深奥的模拟电路硬件适应需求，就好像是在为一根以太网电缆的两端做平衡、调节。
它运行的非常良好以至于用户都不曾听说过，甚至大部分的程序员也并不清楚它是如何运行的。

## 网络路由
在模拟电话时代的晚期，打电话意味着你的电话到你朋友的电话之间存在一条**连续的电连接**，
就像是在你们之间拉了一条电线似得，当然是没有这样的一条电线的，这条连接是通过复杂的交换系统实现的，但在电的层面上这确实等价于一条单独的电线。

在互联网节点间有着更多的类似这样的连接请求，但是我们无法在想要通信的两台机器之间提供一条直接不间断的路径。

于是我们将数据被打成信息包从一个路由器传递到下一个，在这样构成的链路上，每一次传递都更加接近目的地。
比如从我的个人电脑到Google.com之间的每个路由器都连接了许多其他的路由器，每个路由器又都维持着与他们紧邻路由器的一个路由表。
当一个要去往Google.com的信息包到达时，会根据路由表进行一次快速查找，然后告诉路由器这个信息包该派发到哪个邻近路由器上，以使它更接近Google。
这些信息包都很小，所以链路上的路由器花费几毫秒就能将它们转发。

路由的过程可拆分为两个子问题：
1. **寻址**，即信息包要被发往何处？这由IP([网际协议](https://zh.wikipedia.org/wiki/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE))控制，
仅仅根据源主机和目的主机的地址传送数据，定义了寻址方式和数据报的封装方式。
最主要的版本IPv4提供了32位的地址空间，不过目前已经全部分配完毕，所以再往公网增加节点就需要对已有的IP地址进行重用。
最新的IPv6提供\\(2^{128}\\)个地址（大约\\(10^{38}\\)），不过2017年已有大有20%被分配。

2. **路由表**，现在有了地址，接下来我们需要知道如何经过互联网将信息包路由到它的目的地处。
路由发生的很快，所以没有时间去远程数据库上查询路由信息。
举个例子，Cisco ASR 9922路由器最大容量为每秒160兆位，假设1.5KB的满数据报，在19英寸机架上每秒就要转发13,333,333,333个数据报。
路由器维持的路由表指向的是多个IP地址组，当一个新数据报到达时，路由器查询路由表后告诉数据报哪个邻近节点更接近目的地，随即派发后就去处理下个数据报了。
BGP的工作是通过去中心化的方式维护更新不同路由器相连关系的路由表。

然而仅依据IP和BGP并不能构建一个可用的互联网，因为他们无法保证数据的可靠传输。
如果一个路由器超载而废弃一个数据报，我们就需要一种方式能够检测到这种丢包并且请求重传。

## 分组交换

## 乱序报文

## 传输窗和慢启动

## 可靠传输

## 物理网络

## 网络与现实世界

## 互联的网络协议栈
